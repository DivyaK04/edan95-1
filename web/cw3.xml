<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC
        "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Assignment #3: Convolutional Networks</title>
    </head>
    <body>
        <!--<h1>Assignment #3: Convolutional Networks</h1>-->
        <!--<h2>Provisional</h2>
        <p>The content of this page is provisional and will possibly change by the day of the lab.</p>-->
        <h2>Objectives</h2>
        <p>The objectives of this assignment are to:</p>
        <ul>
            <li>Write a program to recognize flowers on images</li>
            <li>Learn how to manage an image data set</li>
            <li>Apply convolutional networks to images</li>
            <li>Know what Python generators are</li>
            <li>Understand class activation</li>
            <li>Write a short report on your experiments. This report is mandatory to pass the
                assignment.
            </li>
        </ul>
        <h2>Organization and location</h2>
        <p>The second lab session will take place on</p>
        <ul>
            <li>Groups 1 and 2: Thursday, November 21 from 13:15 to 15:00 in the Alpha and Beta rooms</li>
            <li>Groups 3 and 4: Friday, November 22 from 13:15 to 15:00 in the Alpha and Beta rooms</li>
        </ul>
        <p>Always check the calender for last minute changes:
            <a href="https://cloud.timeedit.net/lu/web/lth1/ri1X50gQ0560YfQQ85Z6974Y0Zy7007345Y63Q564.html">
                https://cloud.timeedit.net/lu/web/lth1/ri1X50gQ0560YfQQ85Z6974Y0Zy7007345Y63Q564.html
            </a>
        </p>
        <p>You can work alone or collaborate with another student:</p>
        <ul>
            <li>Each group will have to write Python programs to recognize the sort of flower in an image.
            </li>
            <li>You will have to experiment different architectures and compare the results you obtained.</li>
            <li>Each student will have to run at home Chollet's notebook:
                <tt>5.4-visualizing-what-convnets-learn.ipynb</tt></li>
            <li>Each student will have to write an individual report on these experiments.</li>
        </ul>
        <h2>Programming</h2>
        <h3>Collecting a Dataset</h3>
        <ol>
            <li>You will collect a dataset from <a href="https://www.kaggle.com/">Kaggle</a>. Register,
                it is free, and you will have access to lots of datasets.
            </li>
            <li>
                Download the <a href="https://www.kaggle.com/alxmamaev/flowers-recognition">Flower corpus</a>.
                You can find a local copy in the <tt>/usr/local/cs/EDAN95/datasets</tt> folder.
            </li>
            <li>Alternatively, you can use another dataset, provided that it has more than two categories. Tell your
                teacher in advance in this case to check if it is acceptable. You can use the Google dataset search:
                <a href="https://toolbox.google.com/datasetsearch">https://toolbox.google.com/datasetsearch</a>.
            </li>
            <li>Split randomly your dataset into training, validation, and test sets: Use a 60/20/20 ratio.
                You will read all the file names and create a list of pairs, (file_name, category).
                You will then shuffle your list and save your partition of the data.
                <br/>
                To speed up the lab, you can also
                <ol>
                    <li>
                        Start with the partition available in the <tt>/usr/local/cs/EDAN95/datasets</tt> folder; or
                    </li>
                    <li>
                        You can also use the code available from
                        <a href="https://github.com/pnugues/edan95">https://github.com/pnugues/edan95</a>.
                    </li>
                </ol>
            </li>
        </ol>
        <h3>Building a Simple Convolutional Neural Network</h3>
        <ol>
            <li>Create a simple convolutional network and train a model with the train set.
                You can start from the architecture proposed by Chollet, Listing 5.5 (in Chollet's notebook 5.2), and a small number of epochs.
                Use the ImageDataGenerator class to scale your images as in the book:
                <pre>
    train_datagen = ImageDataGenerator(rescale=1. / 255)
    val_datagen = ImageDataGenerator(rescale=1. / 255)
    test_datagen = ImageDataGenerator(rescale=1. / 255)
                </pre>
                <ul>
                    <li>
                        You will need to modify some parameters so that your network handles multiple classes.
                    </li>
                    <li>
                        You will also adjust the number of steps so that your generator in
                        the fitting procedure sees all the samples.
                    </li>
                    <li>
                        You will report the training and validation losses and accuracies and comment on the possible
                        overfit.
                    </li>
                </ul>
            </li>
            <li>Apply your network to the test set and report the accuracy as well as the confusion matrix you obtained.
                As with fitting, you may need to adjust the number of steps so that your network tests all the
                samples.
            </li>
            <li>Try to improve your model by modifying some parameters and evaluate your network again.</li>
        </ol>
        <h3>Using Image Augmentation</h3>
        <p>
            The flower dataset is relatively small. A way to expand such datasets is to generate artificial images by
            applying small transformations to existing images. Keras provides a built-in class for this:
            <tt>ImageDataGenerator</tt>. You will reuse it and apply it to the flower data set.
        </p>
        <ol>
            <li>
                Using the network from the previous exercise, apply some transformations to your images. You can start
                from Chollet, Listing 5.11 (in notebook 5.2 also).
            </li>
            <li>Report the training and
                validation losses and accuracies and comment on the possible overfit.
            </li>
            <li>
                Apply your network to the test set and report the accuracy as well as the confusion matrix you obtained.
            </li>
        </ol>
        <h3>Using a Pretrained Convolutional Base</h3>
        <p>
            Some research teams have trained convolutional neural networks on much larger datasets. We have seen
            during the lecture that the networks can model conceptual patterns as they go through the layers. This was
            identified by Le Cun in his first experiments
            <a href="http://yann.lecun.com/exdb/lenet/">(http://yann.lecun.com/exdb/lenet/)</a>. In this last part, you
            will train classifiers on top of a pretrained convolutional base.
        </p>
        <ol>
            <li>
                Build a network that consists of the Inception V3 convolutional base and two dense layers. As in
                Chollet, Listing 5.17 (in Chollet's notebook 5.3), you will program an <tt>extract_features()</tt> function.
            </li>
            <li>
                Train your network and report the training and validation losses and accuracies.
            </li>
            <li>
                Apply your network to the test set and report the accuracy as well as the confusion matrix you obtained.
            </li>
            <li>
                Modify your program to include an image transformer. Train a new model. As a hint, you can
                make the whole convolutional base trainable and use the stochastic gradient descent as optimizer.
            </li>
            <li>
                Apply your network to the test set and report the accuracy as well as the confusion matrix you obtained.
            </li>
        </ol>
        <h3>Passing the Assignment</h3>
        <p>
            To pass the assignment, you need to reach an accuracy of 75 (even 80 ideally) with your best network.
        </p>
        <h2>Report</h2>
        <p>You will write a short report of about two pages on your experiments:</p>
        <ol>
            <li>You will describe the architectures you designed and the results you obtained;</li>
            <li>You will run Chollet's notebook 5.4 and read the article <i>Grad-CAM: Visual Explanations
                from Deep Networks via Gradient-based Localization</i> by Selvaraju et al.
                From this, you will reformulate and comment the paragraph
                on <i>Visualizing heatmaps of class activation</i> in the notebook</li>
        </ol>

        <p>To write the report, you will use Overleaf.com. The submission procedure is described here:
            <a href="http://cs.lth.se/edan95/lab-programming-assignments/">http://cs.lth.se/edan95/lab-programming-assignments/</a>,
        but send me the Overleaf link only.</p>
        <!--<p>    and you will send the link to your report
        to the course address: edan95@cs.lth.se. Do not send the PDF, only the link. You will include
        the assignment number in the message object.</p>-->
        <p>You must submit this report no later than one week after you have complete the lab.</p>
    </body>
</html>
